% load "parameters.rb"

module alu(/*AUTOARG*/);
`include "parameters.vh"
`include "alu.vh"

  /*AUTOINPUT*/
  input                 clk;
  input                 xrst;
  input [ALUWIDTH-1:0]  alu_code;
  input [DWIDTH-1:0]    in_a;
  input [DWIDTH-1:0]    in_b;

  /*AUTOOUTPUT*/
  output              zero;
  output [DWIDTH-1:0] result;

  /*AUTOWIRE*/

  /*AUTOREG*/

  assign zero   = result == 0;
  assign result = gen_alu(alu_code, in_a, in_b);

  function [ALUOP_W+7-1:0] gen_alu;
    input [ALUWIDTH-1:0]  alu_code;
    input [DWIDTH-1:0]    in_a;
    input [DWIDTH-1:0]    in_b;
    case (alu_code)
      ALU_AND:  gen_alu = in_a & in_b;
      ALU_OR:   gen_alu = in_a | in_b;
      ALU_ADD:  gen_alu = in_a + in_b;
      ALU_SUB:  gen_alu = in_a - in_b;
      ALU_SLT:  gen_alu = in_a < in_b;
      ALU_NOR:  gen_alu = ~(in_a | in_b);
      default:  gen_alu = 0;
    endcase
  endfunction

endmodule

