% load "parameters.rb"

module alu_ctrl(/*AUTOARG*/);
`include "parameters.vh"
`include "mips.vh"
`include "alu.vh"

  /*AUTOINPUT*/
  input clk;
  input xrst;
  input [ALUOP_W-1:0] alu_op;
  input [OPWIDTH-1:0] func_code;

  /*AUTOOUTPUT*/
  output [ALUWIDTH-1:0] alu_code;

  /*AUTOWIRE*/

  /*AUTOREG*/

  assign alu_code = gen_code(alu_op, func_code);

  function [ALUWIDTH-1:0] gen_code;
    input [ALUOP_W-1:0] alu_op;
    input [OPWIDTH-1:0] func_code;
    case (alu_op)
      ALUOP_LS: gen_code = ALU_ADD;
      ALUOP_BEQ: gen_code = ALU_SUB;
      ALUOP_R:
        case (func_code)
          MIPS_ADD: gen_code = ALU_ADD;
          MIPS_SUB: gen_code = ALU_SUB;
          MIPS_AND: gen_code = ALU_AND;
          MIPS_OR:  gen_code = ALU_OR;
          MIPS_NOR: gen_code = ALU_NOR;
          MIPS_SLT: gen_code = ALU_SLT;
          default:  gen_code = ALU_XXX;
        endcase
      default: gen_code = ALU_XXX;
    endcase
  endfunction

endmodule

