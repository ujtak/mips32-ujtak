% load "parameters.rb"

module top(/*AUTOARG*/);
`include "parameters.vh"

  /*AUTOINPUT*/
  input               clk;
  input               xrst;

  /*AUTOOUTPUT*/

  /*AUTOWIRE*/
  wire [RSIZE-1:0]          write_reg;
  wire signed [DWIDTH-1:0]  alu_b;
  wire signed [DWIDTH-1:0]  reg_data;
  wire signed [DWIDTH-1:0]  data_mem;

  /*AUTOREG*/

  /* pcounter AUTO_TEMPLATE (
      .pc       (inst_addr[ISIZE-1:0]),
  ); */
  pcounter pcounter(/*AUTOINST*/);

  /* mem_inst AUTO_TEMPLATE (
      .mem_we     (1'b0),
      .mem_addr   (inst_addr[ISIZE-1:0]),
      .mem_data   ({DWIDTH{1'b0}}),
      .read_data  (inst[DWIDTH-1:0]),
  ); */
  mem_inst mem_inst(/*AUTOINST*/);

  /* ctrl AUTO_TEMPLATE (
      .opcode (inst[DWIDTH-1:DWIDTH-OPWIDTH]),
  ); */
  ctrl ctrl(/*AUTOINST*/);

  assign write_reg = reg_dst
                   ? inst[DWIDTH-OPWIDTH-RSIZE-1:DWIDTH-OPWIDTH-2*RSIZE]
                   : inst[DWIDTH-OPWIDTH-2*RSIZE-1:DWIDTH-OPWIDTH-3*RSIZE];

  /* reg_file AUTO_TEMPLATE (
      .read1      (inst[DWIDTH-OPWIDTH-1:DWIDTH-OPWIDTH-RSIZE]),
      .read2      (inst[DWIDTH-OPWIDTH-RSIZE-1:DWIDTH-OPWIDTH-2*RSIZE]),
      .write_reg  (write_reg[RSIZE-1:0]),
      .write_data (reg_data[DWIDTH-1:0]),
  ); */
  reg_file reg_file(/*AUTOINST*/);

  /* sign_ext AUTO_TEMPLATE (
      .in_unsigned  (inst[DWIDTH-OPWIDTH-2*RSIZE-1:0]),
      .out_signed   (extended[DWIDTH-1:0]),
  ); */
  sign_ext sign_ext(/*AUTOINST*/);

  assign alu_b = alu_src ? extended : data2;

  /* alu AUTO_TEMPLATE (
      .in_a (data1[DWIDTH-1:0]),
      .in_b (alu_b[DWIDTH-1:0]),
      .result (alu_result[DWIDTH-1:0]),
  ); */
  alu alu(/*AUTOINST*/);

  alu_ctrl alu_ctrl(/*AUTOINST*/);

  /* mem_data AUTO_TEMPLATE (
      .mem_we     (mem_write),
      .mem_addr   (alu_result[DWIDTH-1:0]),
      .write_data (data2[DWIDTH-1:0]),
      .read_data  (data_mem[DWIDTH-1:0]),
  ); */
  mem_data mem_data(/*AUTOINST*/);

  assign reg_data = mem_to_reg ? data_mem : alu_result;

endmodule

